diff --git a/event_log_track_workflows/event_log_track_workflows.info.yml b/event_log_track_workflows/event_log_track_workflows.info.yml
new file mode 100644
index 0000000..5ead5ed
--- /dev/null
+++ b/event_log_track_workflows/event_log_track_workflows.info.yml
@@ -0,0 +1,14 @@
+name: Events Log Track Workflows
+description: 'Logs workflows events performed by the user.'
+type: module
+dependencies:
+  - event_log_track
+  - workflows
+# core: '8.x'
+package: Statistics
+
+# Information added by Drupal.org packaging script on 2017-02-23
+version: '8.x-1.1'
+core: '8.x'
+project: 'events_log_track'
+datestamp: 1487851990
diff --git a/event_log_track_workflows/event_log_track_workflows.module b/event_log_track_workflows/event_log_track_workflows.module
new file mode 100755
index 0000000..0f4038a
--- /dev/null
+++ b/event_log_track_workflows/event_log_track_workflows.module
@@ -0,0 +1,71 @@
+<?php
+
+/**
+ * @file
+ * Logs workflows commands in the event_log_track module.
+ */
+
+/**
+ * Implements hook_event_log_track_handlers().
+ */
+function event_log_track_workflows_event_log_track_handlers() {
+  // Workflows event log handler.
+  $handlers = [];
+  $handlers['workflows'] = [
+    'title' => t('Workflows'),
+  ];
+  return $handlers;
+}
+
+/**
+ * Implements hook_node_insert().
+ */
+function event_log_track_workflows_node_insert($node) {
+  /** @var \Drupal\node\NodeInterface $node */
+  if (!$node->hasField('moderation_state')) {
+    return;
+  }
+  $new_state = $node->get("moderation_state")->getString();
+
+  $log = [
+    'type' => 'workflows',
+    'operation' => 'insert',
+    'description' => t('%type: %title - New node created with workflow state %new_state', [
+      '%type' => $node->getType(),
+      '%title' => $node->getTitle(),
+      '%new_state' => $new_state,
+    ]),
+    'ref_numeric' => $node->id(),
+    'ref_char' => $node->getTitle(),
+  ];
+  event_log_track_insert($log);
+}
+
+/**
+ * Implements hook_node_update().
+ */
+function event_log_track_workflows_node_update($node) {
+  /** @var \Drupal\node\NodeInterface $node */
+  if (!$node->hasField('moderation_state')) {
+    return;
+  }
+
+  $new_state = $node->get("moderation_state")->getString();
+  $old_state = $node->original->get("moderation_state")->getString();
+
+  if ($old_state != $new_state) {
+    $log = [
+      'type' => 'workflows',
+      'operation' => 'update',
+      'description' => t('%type: %title - Workflow state changed from %old_state to %new_state', [
+        '%type' => $node->getType(),
+        '%title' => $node->getTitle(),
+        '%old_state' => $old_state,
+        '%new_state' => $new_state,
+      ]),
+      'ref_numeric' => $node->id(),
+      'ref_char' => $node->getTitle(),
+    ];
+    event_log_track_insert($log);
+  }
+}
